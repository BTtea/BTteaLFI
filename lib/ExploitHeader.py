# BTteaLFI
# Copyright (C) 2024-2025 BTtea
#
# This file is licensed under GPLv2. See LICENSE.txt for details.

class header:
    user_agent_warning=True
    def __init__(self,args,body_DataType=''):
        self.args=args
        self.UserHeaders=self.args.header if self.args.header else []
        self.DefaultHeaders={
            'User-Agent:'   : 'User-Agent: bttealfi/2.0 (https://github.com/BTtea/BTteaLFI)',
            'Content-Type:' : 'Content-Type: text/html'
        }
        if self.args.data:
            self.args.method = 'POST'
            self.DefaultHeaders['Content-Type:'] = 'Content-Type: application/x-www-form-urlencoded'
        self.HeadersFlags={
            'user_agent'   : False,
            'content_type' : False
        }
        if body_DataType == 'json':
            self.DefaultHeaders['Content-Type:'] = 'Content-Type: application/json'
        self.UserHeaders=self.PrepareHeaders(body_DataType)

    def PrepareHeaders(self,body_DataType) -> str:
        from lib.InitializationArgv import MsgEvent

        if self.UserHeaders:
            # Check headers
            for i in range(len(self.UserHeaders)):

                # Check User-Agent
                if 'User-Agent:' in self.UserHeaders[i]:
                    
                    self.DefaultHeaders['User-Agent:'] = self.UserHeaders[i]
                    self.HeadersFlags['user_agent']    = True
                    if self.args.random_agent and self.HeadersFlags['user_agent'] and header.user_agent_warning:
                        header.user_agent_warning=False
                        print(MsgEvent(self.args.level,'WARNING',"Using a custom User-Agent header while also specifying the '--random-agent' option."),end='')

                # Check Content-Type
                elif 'Content-Type:' in self.UserHeaders[i]:
                    self.DefaultHeaders['Content-Type:'] = self.UserHeaders[i]
                    self.HeadersFlags['content_type']    = True

                # Check Content-Length
                elif 'Content-Length:' in self.UserHeaders[i]:
                    print(MsgEvent(self.args.level,'WARNING',"Defining the Content-Length header manually is not allowed."),end='')
                    print(MsgEvent(self.args.level,'DEBUG',"'Content-Length' is set automatically based on the request body."),end='')

                # Check Connection
                elif 'Connection:' in self.UserHeaders[i]:
                    print(MsgEvent(self.args.level,'WARNING',"Defining the Connection header in custom request headers is not allowed."),end='')
                    print(MsgEvent(self.args.level,'DEBUG',"Set Connection header to 'close'."),end='')

        # --random-agent
        if not self.HeadersFlags['user_agent'] and self.args.random_agent:
            from random import choice
            with open("lib/data/txt/user-agents.txt") as f:
                user_agents_list = [line.strip() for line in f if line.strip()]
            while True:
                agent=choice(user_agents_list)
                if not agent.startswith('#'):
                    break
            self.DefaultHeaders['User-Agent:']=f'User-Agent: {agent}'
        

        if self.args.method == 'POST' and body_DataType=='query':
            self.DefaultHeaders['Content-Type:'] = 'Content-Type: application/x-www-form-urlencoded'

        headers=[v for v in self.DefaultHeaders.values()]+list(filter(None,self.UserHeaders))
        headers=list(set(headers))
        return headers if headers else []


    def SearchHeaderProperty(self,HeaderProperty='') -> list:
        if HeaderProperty:
            for i in self.UserHeaders:
                if HeaderProperty in i:
                    return i
            return ''
        return self.UserHeaders


    def __str__(self):
        return '\r\n'.join(self.UserHeaders)


    def __repr__(self):
        return self.__str__()